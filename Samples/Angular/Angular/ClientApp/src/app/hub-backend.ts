//     This code was generated by a Reinforced.Typings tool. 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { Injectable } from '@angular/core';
import { HubConnection } from '@microsoft/signalr';
import { SignalDispatcher, SimpleEventDispatcher } from 'strongly-typed-events';
import { HubConnectionProvider } from './hubconnectionprovider.service';

export class WeatherForecast
{
	public date: Date;
	public temperatureC: number;
	public temperatureF: number;
	public summary: string;
}
@Injectable()
 export class WeatherForecastHubClient implements IWeatherForecastHub
{
	private hubConnection: Promise<HubConnection>;
	constructor (hubConnectionProvider: HubConnectionProvider)
	{
		this.hubConnection = hubConnectionProvider.getHubConnection("/hub");
	}
	public get() : Promise<WeatherForecast[]>
	{
		return this.hubConnection.then(hub => hub.invoke("get",));
	}
}
export interface IWeatherForecastHub
{
	get() : Promise<WeatherForecast[]>;
}
@Injectable()
 export class AngularFrontendInstance
{
	public onNewWeatherForecast: SimpleEventDispatcher<WeatherForecast> = new SimpleEventDispatcher<WeatherForecast>();
	constructor (hubConnectionProvider: HubConnectionProvider)
	{
		hubConnectionProvider.getHubConnection("/hub").then(hubConnection => {
		  hubConnection.on("newWeatherForecast", (weatherForecast : WeatherForecast) => {
		      console.log("newWeatherForecast received from server", weatherForecast);
		      this.onNewWeatherForecast.dispatch(weatherForecast);
		    });
		});
	}
}
